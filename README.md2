# CS_MsgApp

CS_MsgApp is a messaging application built with React (using Vite for development) and Spring Boot for the backend. It includes features for handling customer messages and ensures that no two agents work on the same message concurrently using WebSocket-based communication.

## Requirements

Ensure that the following software is installed on your machine:
- Java 17 or later
- Node.js 16.x or later
- MySQL 8.x or later
- Maven 3.x or later
- Git (optional, for version control)

## Setup Instructions

### Backend Setup (Spring Boot)

The backend is built using Spring Boot and uses MySQL as the database.

1. **Clone the repository**:
   
bash
   git clone <your-private-repo-url>
  

2. **Configure the MySQL Database**:
   - Create a new MySQL database by running:
     
sql
     CREATE DATABASE cs_message_app;
    
   - Update the `application.properties` file located in `src/main/resources` with your MySQL credentials:
     
properties
     spring.datasource.url=jdbc:mysql://localhost:3306/cs_message_app
     spring.datasource.username=<your-username>
     spring.datasource.password=<your-password>
     spring.jpa.hibernate.ddl-auto=update
    

3. **Install Backend Dependencies**:
   Navigate to the root directory of the backend (where `pom.xml` is located) and run:
   
bash
   mvn clean install
  

4. **Run the Spring Boot Application**:
   
bash
   mvn spring-boot:run
  
   The backend will be running on `http://localhost:8080`.

### Frontend Setup (React with Vite)

The frontend is built using React, Tailwind CSS, and Vite as the development server.

1. **Navigate to the Frontend Directory**:
   
bash
   cd frontend
  

2. **Install Frontend Dependencies**:
   Run the following command to install the required libraries:
   
bash
   npm install
  

3. **Start the Vite Development Server**:
   
bash
   npm run dev
  
   The frontend will be running on `http://localhost:5173`.

## Database Configuration

Ensure that MySQL is running locally and that the credentials in `application.properties` are correctly set.

If you haven't set up a MySQL user and database, you can use the following SQL commands:
sql
CREATE DATABASE cs_message_app;
CREATE USER 'cs_app_user'@'localhost' IDENTIFIED BY 'yourpassword';
GRANT ALL PRIVILEGES ON cs_message_app.* TO 'cs_app_user'@'localhost';
FLUSH PRIVILEGES;

## Features

### Basic Functionality
- Users can submit customer messages through the frontend.
- Messages are stored in the MySQL database using Spring Boot and JPA.
- Agents can handle customer messages by marking them as "in progress" or "closed."

### Additional Features
- **Message State Handling**: 
  - Messages can have different states (`open`, `in progress`, `closed`).
  - Only one agent can handle a message at a time, ensuring no two agents work on the same message concurrently.
  
- **WebSockets for Real-Time Updates**:
  - WebSockets are used to broadcast message updates to all connected agents. This ensures that message states are updated in real-time across all users.

## Commands for Running

1. **Start the Backend**:
   
bash
   mvn spring-boot:run
  

2. **Start the Frontend**:
   In a separate terminal window, navigate to the `frontend` folder and run:
   
bash
   npm run dev
  

## Notes
- Ensure that MySQL is running before starting the backend.
- Both the backend and frontend should be running for full functionality.

## Dependencies

### Backend
- Spring Web
- Spring Data JPA
- Spring Boot DevTools
- MySQL Connector
- Lombok
- WebSocket
- Hibernate

### Frontend
- React
- Axios
- WebSocket
- Tailwind CSS
